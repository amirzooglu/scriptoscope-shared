import { type RequestNotesResponse } from '../schemas/RequestNoteSchema';
export declare const GetRequestNotesResponseSchema: import("zod").ZodArray<import("zod").ZodObject<{
    id: import("zod").ZodString;
    requestId: import("zod").ZodNullable<import("zod").ZodString>;
    noteId: import("zod").ZodNullable<import("zod").ZodString>;
    createdAt: import("zod").ZodNullable<import("zod").ZodDate>;
    createdBy: import("zod").ZodNullable<import("zod").ZodString>;
    notes: import("zod").ZodNullable<import("zod").ZodObject<{
        id: import("zod").ZodString;
        content: import("zod").ZodString;
        createdAt: import("zod").ZodNullable<import("zod").ZodDate>;
        updatedAt: import("zod").ZodNullable<import("zod").ZodDate>;
        organizationId: import("zod").ZodNullable<import("zod").ZodString>;
        createdBy: import("zod").ZodNullable<import("zod").ZodString>;
        updatedBy: import("zod").ZodNullable<import("zod").ZodString>;
    }, "strip", import("zod").ZodTypeAny, {
        id: string;
        content: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
    }, {
        id: string;
        content: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
    }>>;
    requests: import("zod").ZodNullable<import("zod").ZodObject<{
        id: import("zod").ZodString;
        organizationId: import("zod").ZodNullable<import("zod").ZodString>;
        applicationId: import("zod").ZodNullable<import("zod").ZodString>;
        statusId: import("zod").ZodNullable<import("zod").ZodString>;
        requestTypeId: import("zod").ZodNullable<import("zod").ZodString>;
        requestRoleId: import("zod").ZodNullable<import("zod").ZodString>;
        requestOwnerId: import("zod").ZodNullable<import("zod").ZodString>;
        requestorId: import("zod").ZodNullable<import("zod").ZodString>;
        requestDate: import("zod").ZodNullable<import("zod").ZodDate>;
        requestNumber: import("zod").ZodNullable<import("zod").ZodString>;
        shortDescription: import("zod").ZodNullable<import("zod").ZodString>;
        notes: import("zod").ZodNullable<import("zod").ZodString>;
        effectiveDate: import("zod").ZodNullable<import("zod").ZodDate>;
        expirationDate: import("zod").ZodNullable<import("zod").ZodDate>;
        autoRenewal: import("zod").ZodNullable<import("zod").ZodBoolean>;
        includeAmount: import("zod").ZodNullable<import("zod").ZodBoolean>;
        requestValue: import("zod").ZodNullable<import("zod").ZodNumber>;
        amountReceived: import("zod").ZodNullable<import("zod").ZodNumber>;
        sendAlert: import("zod").ZodNullable<import("zod").ZodBoolean>;
        internalEntity: import("zod").ZodNullable<import("zod").ZodString>;
        createdAt: import("zod").ZodNullable<import("zod").ZodDate>;
        createdBy: import("zod").ZodNullable<import("zod").ZodString>;
        updatedAt: import("zod").ZodNullable<import("zod").ZodDate>;
        updatedBy: import("zod").ZodNullable<import("zod").ZodString>;
    }, "strip", import("zod").ZodTypeAny, {
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
        applicationId: string | null;
        statusId: string | null;
        requestTypeId: string | null;
        requestRoleId: string | null;
        requestOwnerId: string | null;
        requestorId: string | null;
        requestDate: Date | null;
        requestNumber: string | null;
        shortDescription: string | null;
        notes: string | null;
        effectiveDate: Date | null;
        expirationDate: Date | null;
        autoRenewal: boolean | null;
        includeAmount: boolean | null;
        requestValue: number | null;
        amountReceived: number | null;
        sendAlert: boolean | null;
        internalEntity: string | null;
    }, {
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
        applicationId: string | null;
        statusId: string | null;
        requestTypeId: string | null;
        requestRoleId: string | null;
        requestOwnerId: string | null;
        requestorId: string | null;
        requestDate: Date | null;
        requestNumber: string | null;
        shortDescription: string | null;
        notes: string | null;
        effectiveDate: Date | null;
        expirationDate: Date | null;
        autoRenewal: boolean | null;
        includeAmount: boolean | null;
        requestValue: number | null;
        amountReceived: number | null;
        sendAlert: boolean | null;
        internalEntity: string | null;
    }>>;
}, "strip", import("zod").ZodTypeAny, {
    id: string;
    createdAt: Date | null;
    createdBy: string | null;
    notes: {
        id: string;
        content: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
    } | null;
    requestId: string | null;
    noteId: string | null;
    requests: {
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
        applicationId: string | null;
        statusId: string | null;
        requestTypeId: string | null;
        requestRoleId: string | null;
        requestOwnerId: string | null;
        requestorId: string | null;
        requestDate: Date | null;
        requestNumber: string | null;
        shortDescription: string | null;
        notes: string | null;
        effectiveDate: Date | null;
        expirationDate: Date | null;
        autoRenewal: boolean | null;
        includeAmount: boolean | null;
        requestValue: number | null;
        amountReceived: number | null;
        sendAlert: boolean | null;
        internalEntity: string | null;
    } | null;
}, {
    id: string;
    createdAt: Date | null;
    createdBy: string | null;
    notes: {
        id: string;
        content: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
    } | null;
    requestId: string | null;
    noteId: string | null;
    requests: {
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        organizationId: string | null;
        createdBy: string | null;
        updatedBy: string | null;
        applicationId: string | null;
        statusId: string | null;
        requestTypeId: string | null;
        requestRoleId: string | null;
        requestOwnerId: string | null;
        requestorId: string | null;
        requestDate: Date | null;
        requestNumber: string | null;
        shortDescription: string | null;
        notes: string | null;
        effectiveDate: Date | null;
        expirationDate: Date | null;
        autoRenewal: boolean | null;
        includeAmount: boolean | null;
        requestValue: number | null;
        amountReceived: number | null;
        sendAlert: boolean | null;
        internalEntity: string | null;
    } | null;
}>, "many">;
export type GetRequestNotesResponseType = RequestNotesResponse;
//# sourceMappingURL=GetRequestNotesResponse.d.ts.map